// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PawfectPlaceShop.App.DataAccess.Contexts;

#nullable disable

namespace PawfectPlaceShop.App.DataAccess.Migrations
{
    [DbContext(typeof(PetShopDbContext))]
    [Migration("20240721112938_addphotolar")]
    partial class addphotolar
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PawfectPlaceShop.App.DataAccess.Identity.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("PawfectPlaceShop.App.DataAccess.Identity.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PawfectPlaceShop.App.Entity.Entities.AnimalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AnimalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("AnimalTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnimalName = "Köpek"
                        },
                        new
                        {
                            Id = 2,
                            AnimalName = "Kedi"
                        },
                        new
                        {
                            Id = 3,
                            AnimalName = "Kuş"
                        },
                        new
                        {
                            Id = 4,
                            AnimalName = "Balık"
                        });
                });

            modelBuilder.Entity("PawfectPlaceShop.App.Entity.Entities.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleCategoryId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArticleCategoryId = 1,
                            Content = "Sokakta bulunan sevimli yavru kedi, sıcak bir yuva arıyor. Veteriner kontrolleri yapılmış, iç ve dış parazit tedavisi tamamlanmıştır. Yeni sahibine karnesi ile birlikte teslim edilecektir. Çok oyuncu ve sevecen bir karaktere sahiptir.",
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2556),
                            Location = "İstanbul, Kadıköy",
                            PictureUrl = "https://www.mamaplus.com/storage/uploads/images/Blog/kopek/64b2a543f231b.jpeg",
                            Title = "Yavru Kedi",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ArticleCategoryId = 1,
                            Content = "Safkan İran kedisi sahiplendirilecektir. 2 yaşında, tüm aşıları tam, sağlıklı ve bakımlıdır. Yeni sahibine alışması için biraz zaman gerektirebilir. Evde yalnız kalmayı sevmeyen, ilgi isteyen bir kedidir.",
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2558),
                            Location = "Ankara, Çankaya",
                            PictureUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=540,quality=99/52768/uploads/blog/persian-iran-kedilerinin-ozellikleri-0663.jpg",
                            Title = "İran Kedisi",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            ArticleCategoryId = 1,
                            Content = "Scottish Fold cinsi 3 aylık yavru kediler sahiplendirilecektir. Tüy dökme sorunu yaşamayan, oyuncu ve sosyal kedilerdir. Veteriner kontrolleri eksiksiz yapılmıştır. Tuvalet eğitimi verilmiştir.",
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2560),
                            Location = "İzmir, Bornova",
                            PictureUrl = "https://www.patibul.com/uploads/ajax/2023/03/03/IMG-4054-6401CD1B83876.jpg",
                            Title = "Scottish Fold Yavruları",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            ArticleCategoryId = 1,
                            Content = "Sokakta yaralı bulunan ve tedavi ettirilen sarman kedi sahiplendirilecektir. 1 yaşında, sevecen ve oyuncudur. Evde çocuklarla iyi anlaşan, sosyal bir kedidir. Karnesi ile birlikte teslim edilecektir.",
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2562),
                            Location = "Antalya, Muratpaşa",
                            PictureUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=540,quality=99/9062/uploads/editoruploads/06a90ea6-87bb-45b8-931f-8ae475b89248-758.jpeg",
                            Title = "Sarman Kedi",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            ArticleCategoryId = 2,
                            Content = "Golden Retriever cinsi 2 aylık yavrular sahiplendirilecektir. Anne sütüyle beslenmiş, sağlık kontrolleri yapılmıştır. Çok enerjik ve oyuncu köpeklerdir. Evde çocuklarla çok iyi anlaşırlar.",
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2564),
                            Location = "İstanbul, Beşiktaş",
                            PictureUrl = "https://www.patibul.com/uploads/ajax/2023/02/28/WhatsApp-Image-2023-02-20-at-113214-(1)-63FDABE6E0598.jpeg",
                            Title = "Golden Retriever Yavruları",
                            UserId = 5
                        },
                        new
                        {
                            Id = 6,
                            ArticleCategoryId = 2,
                            Content = "Safkan Alman Kurdu, 3 yaşında, tüm aşıları yapılmış, sağlıklı ve güçlü bir köpektir. Eğitimi verilmiş, itaatkar ve koruyucu bir yapıya sahiptir. Büyük bahçeli bir eve sahip yeni sahip aranıyor.",
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2566),
                            Location = "Ankara, Etimesgut",
                            PictureUrl = "https://www.guardiaturca.com/wp-content/uploads/german-shepherd-alman-kurdu-ozellikleri.jpg",
                            Title = "Alman Kurdu",
                            UserId = 6
                        },
                        new
                        {
                            Id = 7,
                            ArticleCategoryId = 2,
                            Content = "Beagle cinsi 4 aylık yavru köpek sahiplendirilecektir. Çok enerjik, oyuncu ve sosyal bir yapıya sahiptir. Veteriner kontrolleri yapılmış, karnesi bulunmaktadır. Çocuklarla iyi anlaşan bir köpektir.",
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2567),
                            Location = "İzmir, Karşıyaka",
                            PictureUrl = "https://www.evcilhayvan.market/wp-content/uploads/2017/06/yavru-beagle-kopek.jpg",
                            Title = "Beagle Yavrusu",
                            UserId = 7
                        },
                        new
                        {
                            Id = 8,
                            ArticleCategoryId = 2,
                            Content = "Terrier cinsi 1 yaşındaki köpek sahiplendirilecektir. Küçük ırk, ev içinde yaşamaya uygun, sevecen ve enerjik bir köpektir. Aşıları tam, sağlık durumu çok iyi. Yeni sahibine alışması biraz zaman alabilir.",
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2569),
                            Location = "Antalya, Kepez",
                            PictureUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=540,quality=99/9062//uploads/editoruploads/0yorkshire-terrier.jpg",
                            Title = "Terrier Cinsi Köpek",
                            UserId = 8
                        },
                        new
                        {
                            Id = 9,
                            ArticleCategoryId = 3,
                            Content = "Farklı renklerde muhabbet kuşları sahiplendirilecektir. Çok konuşkan, oyuncu ve sağlıklıdırlar. Yeni sahibine kolayca alışacak, evde neşe kaynağı olacaklardır.",
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2571),
                            Location = "İstanbul, Üsküdar",
                            PictureUrl = "https://www.petihtiyac.com/Data/Blog/1/113.jpg",
                            Title = "Muhabbet Kuşu ",
                            UserId = 9
                        },
                        new
                        {
                            Id = 10,
                            ArticleCategoryId = 3,
                            Content = "Ara papağanı, 1 yaşında, konuşkan ve sosyal bir kuştur. Eğitimli, insanlarla kolayca iletişim kurar. Sağlıklı ve bakımlıdır. Geniş bir kafes ve ilgi isteyen bir kuş olduğu unutulmamalıdır.",
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2573),
                            Location = "Ankara, Mamak",
                            PictureUrl = "https://www.atasehirveteriner.com/upload/images/jako-papagan.jpg",
                            Title = "Papağan",
                            UserId = 10
                        },
                        new
                        {
                            Id = 11,
                            ArticleCategoryId = 3,
                            Content = "Ötücü kanarya, 6 aylık, çok enerjik ve sağlıklıdır. Günde birkaç saat şarkı söyleyen, evin neşesi olacak bir kuştur. Yeni sahibine hızlıca alışacak, kolay bakımı olan bir evcil hayvandır.",
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2575),
                            Location = "İzmir, Gaziemir",
                            PictureUrl = "https://www.petihtiyac.com/Data/Blog/664.jpg",
                            Title = "Kanarya",
                            UserId = 11
                        },
                        new
                        {
                            Id = 12,
                            ArticleCategoryId = 3,
                            Content = "Saka kuşu, 1 yaşında, çok ötücü ve enerjik bir kuştur. Doğal ortamında bulup sahiplendirdik. Sağlıklı ve neşelidir. Geniş bir kafeste bakılması önerilir.",
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2576),
                            Location = "Antalya, Konyaaltı",
                            PictureUrl = "https://www.petipet.net/uploads/2020/07/images-1-1.jpg",
                            Title = "Saka Kuşu",
                            UserId = 12
                        },
                        new
                        {
                            Id = 13,
                            ArticleCategoryId = 4,
                            Content = "Çeşitli renklerde Japon balıkları, akvaryum içinde harika bir görüntü sağlar. Sağlıklı ve bakımlıdır. Su değişimi ve yemlemesi düzenli yapılmıştır. Yeni sahibine akvaryumla birlikte teslim edilecektir.",
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2578),
                            Location = "İstanbul, Şişli",
                            PictureUrl = "https://static.ticimax.cloud/cdn-cgi/image/width=540,quality=99/9062/uploads/editoruploads/japon-baligi.jpg",
                            Title = "Japon Balığı",
                            UserId = 13
                        },
                        new
                        {
                            Id = 14,
                            ArticleCategoryId = 4,
                            Content = "Renkli ve gösterişli Betta balığı sahiplendirilecektir. Sağlıklı, bakımlı ve enerjik bir balıktır. Küçük bir akvaryumda veya fanusta rahatça yaşayabilir. Tek bakılması önerilir.",
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2580),
                            Location = "Ankara, Yenimahalle",
                            PictureUrl = "https://storage.evrimagaci.org/old/content_media/7dc03454e9646168baf5a463fcdd3e6f.jpg",
                            Title = "Betta Balığı",
                            UserId = 14
                        },
                        new
                        {
                            Id = 15,
                            ArticleCategoryId = 4,
                            Content = "Lepistes balıkları, çeşitli renk ve desenlerde, çok sağlıklı ve bakımlıdır. Akvaryum ortamına kolayca uyum sağlarlar. Bakımları kolay ve keyifli olan balıklardır.",
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2582),
                            Location = "İzmir, Buca",
                            PictureUrl = "https://storage.evrimagaci.org/old/content_media/3723213440e3ea2a80717dc1969081a2.png",
                            Title = "Lepistes Balığı",
                            UserId = 15
                        },
                        new
                        {
                            Id = 16,
                            ArticleCategoryId = 4,
                            Content = "Neon Tetra balıkları, parlak renkleri ve sürü halinde yüzmeleriyle ünlüdür. Sağlıklı ve enerjik balıklardır. Akvaryum ortamında çok güzel bir görüntü sağlarlar.",
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2583),
                            Location = "Antalya, Alanya",
                            PictureUrl = "https://www.petihtiyac.com/Data/Blog/1/155.jpg",
                            Title = "Neon Tetra Balıkları",
                            UserId = 16
                        });
                });

            modelBuilder.Entity("PawfectPlaceShop.App.Entity.Entities.ArticleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ArticleCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Kedi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Köpek"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kuş"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Balık"
                        });
                });

            modelBuilder.Entity("PawfectPlaceShop.App.Entity.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "İstanbul, Türkiye",
                            Email = "ahmet@example.com",
                            IsAdmin = false,
                            Name = "Ahmet Yılmaz",
                            Password = "password123",
                            Phone = "5555555555"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Ankara, Türkiye",
                            Email = "ayse@example.com",
                            IsAdmin = true,
                            Name = "Ayşe Demir",
                            Password = "password123",
                            Phone = "5555555556"
                        });
                });

            modelBuilder.Entity("PawfectPlaceShop.App.Entity.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimalTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("/images/default.jpg");

                    b.Property<bool>("IsDiscount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPopuler")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnimalTypeId");

                    b.HasIndex("ProductCategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnimalTypeId = 1,
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2685),
                            Description = "Yüksek kaliteli köpek maması",
                            ImageUrl = "/images/kopek_mamasi.jpg",
                            IsDiscount = false,
                            IsPopuler = true,
                            Name = "Köpek Maması",
                            Price = 50m,
                            ProductCategoryId = 1,
                            Stock = 100
                        },
                        new
                        {
                            Id = 2,
                            AnimalTypeId = 2,
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2694),
                            Description = "Renkli ve eğlenceli kedi oyuncağı",
                            ImageUrl = "/images/kedi_oyuncagi.jpg",
                            IsDiscount = true,
                            IsPopuler = false,
                            Name = "Kedi Oyuncağı",
                            Price = 20m,
                            ProductCategoryId = 3,
                            Stock = 200
                        },
                        new
                        {
                            Id = 3,
                            AnimalTypeId = 3,
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2696),
                            Description = "Geniş ve konforlu kuş kafesi",
                            ImageUrl = "/images/kus_kafesi.jpg",
                            IsDiscount = false,
                            IsPopuler = false,
                            Name = "Kuş Kafesi",
                            Price = 75m,
                            ProductCategoryId = 3,
                            Stock = 50
                        },
                        new
                        {
                            Id = 4,
                            AnimalTypeId = 4,
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2697),
                            Description = "Geniş ve şık balık akvaryumu",
                            ImageUrl = "/images/balik_akvaryumu.jpg",
                            IsDiscount = false,
                            IsPopuler = true,
                            Name = "Balık Akvaryumu",
                            Price = 150m,
                            ProductCategoryId = 3,
                            Stock = 20
                        },
                        new
                        {
                            Id = 5,
                            AnimalTypeId = 2,
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2699),
                            Description = "Sağlıklı ve besleyici kedi maması",
                            ImageUrl = "/images/kedi_mamasi.jpg",
                            IsDiscount = true,
                            IsPopuler = false,
                            Name = "Kedi Maması",
                            Price = 30m,
                            ProductCategoryId = 1,
                            Stock = 150
                        },
                        new
                        {
                            Id = 6,
                            AnimalTypeId = 1,
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2701),
                            Description = "Dayanıklı ve şık köpek tasması",
                            ImageUrl = "/images/kopek_tasmassi.jpg",
                            IsDiscount = true,
                            IsPopuler = true,
                            Name = "Köpek Tasması",
                            Price = 25m,
                            ProductCategoryId = 2,
                            Stock = 100
                        },
                        new
                        {
                            Id = 7,
                            AnimalTypeId = 3,
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2702),
                            Description = "Vitaminli ve besleyici kuş yemi",
                            ImageUrl = "/images/kus_yemi.jpg",
                            IsDiscount = false,
                            IsPopuler = true,
                            Name = "Kuş Yemi",
                            Price = 15m,
                            ProductCategoryId = 1,
                            Stock = 300
                        },
                        new
                        {
                            Id = 8,
                            AnimalTypeId = 4,
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2704),
                            Description = "Kaliteli ve besleyici balık yemi",
                            ImageUrl = "/images/balik_yemi.jpg",
                            IsDiscount = true,
                            IsPopuler = false,
                            Name = "Balık Yemi",
                            Price = 10m,
                            ProductCategoryId = 1,
                            Stock = 400
                        },
                        new
                        {
                            Id = 9,
                            AnimalTypeId = 2,
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2706),
                            Description = "Kedi için oyuncak ve aksesuar seti",
                            ImageUrl = "/images/kedi_aksesuar_seti.jpg",
                            IsDiscount = false,
                            IsPopuler = true,
                            Name = "Kedi Aksesuar Seti",
                            Price = 40m,
                            ProductCategoryId = 2,
                            Stock = 80
                        },
                        new
                        {
                            Id = 10,
                            AnimalTypeId = 1,
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2707),
                            Description = "Dayanıklı ve eğlenceli köpek oyuncağı",
                            ImageUrl = "/images/kopek_oyuncagi.jpg",
                            IsDiscount = true,
                            IsPopuler = true,
                            Name = "Köpek Oyuncağı",
                            Price = 30m,
                            ProductCategoryId = 3,
                            Stock = 120
                        },
                        new
                        {
                            Id = 11,
                            AnimalTypeId = 1,
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2709),
                            Description = "Dayanıklı ve eğlenceli köpek oyuncağı",
                            ImageUrl = "/images/kopek_oyuncagi.jpg",
                            IsDiscount = true,
                            IsPopuler = true,
                            Name = "Köpek Oyuncağı",
                            Price = 30m,
                            ProductCategoryId = 3,
                            Stock = 120
                        },
                        new
                        {
                            Id = 12,
                            AnimalTypeId = 1,
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2711),
                            Description = "Köpeğiniz için rahat ve dayanıklı tasma seti",
                            ImageUrl = "/images/kopek_tasma.jpg",
                            IsDiscount = false,
                            IsPopuler = true,
                            Name = "Köpek Tasma ve Tasması",
                            Price = 25m,
                            ProductCategoryId = 2,
                            Stock = 100
                        },
                        new
                        {
                            Id = 13,
                            AnimalTypeId = 2,
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2712),
                            Description = "Kediniz için rahatlatıcı ve dayanıklı tırmalama ağacı",
                            ImageUrl = "/images/kedi_tirmalama_agaci.jpg",
                            IsDiscount = false,
                            IsPopuler = true,
                            Name = "Kedi Tırmalama Ağacı",
                            Price = 50m,
                            ProductCategoryId = 3,
                            Stock = 80
                        },
                        new
                        {
                            Id = 14,
                            AnimalTypeId = 3,
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2714),
                            Description = "Kuşunuz için geniş ve konforlu kafes",
                            ImageUrl = "/images/kus_kafesi.jpg",
                            IsDiscount = true,
                            IsPopuler = true,
                            Name = "Geniş Kuş Kafesi",
                            Price = 40m,
                            ProductCategoryId = 3,
                            Stock = 60
                        },
                        new
                        {
                            Id = 15,
                            AnimalTypeId = 4,
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2716),
                            Description = "Balıklarınız için modern ve şık akvaryum seti",
                            ImageUrl = "/images/akvaryum_seti.jpg",
                            IsDiscount = false,
                            IsPopuler = true,
                            Name = "Akvaryum Seti",
                            Price = 70m,
                            ProductCategoryId = 3,
                            Stock = 30
                        },
                        new
                        {
                            Id = 16,
                            AnimalTypeId = 1,
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2717),
                            Description = "Sağlıklı ve dengeli beslenme için köpek kuru maması",
                            ImageUrl = "/images/kopek_kuru_mamasi.jpg",
                            IsDiscount = false,
                            IsPopuler = true,
                            Name = "Köpek Kuru Maması",
                            Price = 55m,
                            ProductCategoryId = 1,
                            Stock = 90
                        },
                        new
                        {
                            Id = 17,
                            AnimalTypeId = 1,
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2719),
                            Description = "Konforlu ve yumuşak köpek yatağı",
                            ImageUrl = "/images/kopek_yatagi.jpg",
                            IsDiscount = true,
                            IsPopuler = true,
                            Name = "Köpek Yatak",
                            Price = 40m,
                            ProductCategoryId = 2,
                            Stock = 70
                        },
                        new
                        {
                            Id = 18,
                            AnimalTypeId = 2,
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2721),
                            Description = "Lezzetli ve sağlıklı kedi konservesi",
                            ImageUrl = "/images/kedi_konservesi.jpg",
                            IsDiscount = true,
                            IsPopuler = true,
                            Name = "Kedi Konservesi",
                            Price = 10m,
                            ProductCategoryId = 1,
                            Stock = 120
                        },
                        new
                        {
                            Id = 19,
                            AnimalTypeId = 2,
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2722),
                            Description = "Eğlenceli ve oyun dolu kedi oyun tüneli",
                            ImageUrl = "/images/kedi_oyun_tuneli.jpg",
                            IsDiscount = false,
                            IsPopuler = true,
                            Name = "Kedi Oyun Tüneli",
                            Price = 20m,
                            ProductCategoryId = 3,
                            Stock = 100
                        },
                        new
                        {
                            Id = 20,
                            AnimalTypeId = 3,
                            CreatedDate = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2724),
                            Description = "Muhabbet kuşlarınız için özel karışım yem",
                            ImageUrl = "/images/muhabbet_kusu_yemi.jpg",
                            IsDiscount = false,
                            IsPopuler = true,
                            Name = "Muhabbet Kuşu Yemi",
                            Price = 8m,
                            ProductCategoryId = 1,
                            Stock = 150
                        });
                });

            modelBuilder.Entity("PawfectPlaceShop.App.Entity.Entities.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Mama"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Aksesuar"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Oyuncak"
                        });
                });

            modelBuilder.Entity("PawfectPlaceShop.App.Entity.Entities.ProductSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ProductSales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            Date = new DateTime(2024, 7, 21, 14, 29, 38, 279, DateTimeKind.Local).AddTicks(2838),
                            TotalPrice = 120m,
                            TotalQuantity = 2
                        });
                });

            modelBuilder.Entity("PawfectPlaceShop.App.Entity.Entities.ProductSaleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductSaleId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductSaleId");

                    b.ToTable("ProductSaleDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Number = 2,
                            ProductId = 1,
                            ProductSaleId = 1,
                            UnitPrice = 50m
                        },
                        new
                        {
                            Id = 2,
                            Number = 1,
                            ProductId = 2,
                            ProductSaleId = 1,
                            UnitPrice = 20m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("PawfectPlaceShop.App.DataAccess.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("PawfectPlaceShop.App.DataAccess.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("PawfectPlaceShop.App.DataAccess.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("PawfectPlaceShop.App.DataAccess.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PawfectPlaceShop.App.DataAccess.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("PawfectPlaceShop.App.DataAccess.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PawfectPlaceShop.App.Entity.Entities.Article", b =>
                {
                    b.HasOne("PawfectPlaceShop.App.Entity.Entities.ArticleCategory", "articleCategory")
                        .WithMany("Articles")
                        .HasForeignKey("ArticleCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("articleCategory");
                });

            modelBuilder.Entity("PawfectPlaceShop.App.Entity.Entities.Product", b =>
                {
                    b.HasOne("PawfectPlaceShop.App.Entity.Entities.AnimalType", "animalType")
                        .WithMany("products")
                        .HasForeignKey("AnimalTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PawfectPlaceShop.App.Entity.Entities.ProductCategory", "productCategory")
                        .WithMany("products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("animalType");

                    b.Navigation("productCategory");
                });

            modelBuilder.Entity("PawfectPlaceShop.App.Entity.Entities.ProductSale", b =>
                {
                    b.HasOne("PawfectPlaceShop.App.Entity.Entities.Customer", "customer")
                        .WithMany("productSales")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customer");
                });

            modelBuilder.Entity("PawfectPlaceShop.App.Entity.Entities.ProductSaleDetail", b =>
                {
                    b.HasOne("PawfectPlaceShop.App.Entity.Entities.Product", "product")
                        .WithMany("productSaleDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PawfectPlaceShop.App.Entity.Entities.ProductSale", "productSale")
                        .WithMany("productSaleDetails")
                        .HasForeignKey("ProductSaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");

                    b.Navigation("productSale");
                });

            modelBuilder.Entity("PawfectPlaceShop.App.Entity.Entities.AnimalType", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("PawfectPlaceShop.App.Entity.Entities.ArticleCategory", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("PawfectPlaceShop.App.Entity.Entities.Customer", b =>
                {
                    b.Navigation("productSales");
                });

            modelBuilder.Entity("PawfectPlaceShop.App.Entity.Entities.Product", b =>
                {
                    b.Navigation("productSaleDetails");
                });

            modelBuilder.Entity("PawfectPlaceShop.App.Entity.Entities.ProductCategory", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("PawfectPlaceShop.App.Entity.Entities.ProductSale", b =>
                {
                    b.Navigation("productSaleDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
